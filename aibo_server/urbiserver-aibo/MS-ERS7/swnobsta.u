    ############################################################################
    #
    #   NegativeObsstacleDetection.u
    #
    #   Note :  The following functions enable/disable the
    #           careful walking control systems.(Default = false)
    #
    #      robot.CliffeDetection(TRUE/FALSE)
    #      robot.ObstacleDetection(TRUE/FALSE)
    #
    #      Distance to obstacles is set in the DANGERLEVEL variable
    #
    ############################################################################

if (isdef(robot.CliffDetection))
{
  undef robot.CliffDetection;
  undef robot.ObstacleDetection;
  undef robot.cliffinitialization;
  undef robot.cliffalert;
  undef robot.odinitialization;
  undef robot.obstaclealert;
};


    function robot.CliffDetection(op)                //User Interface : Enable/Disable CliffDetection
    {
        if (op==true)
           robot.cliffdetect=true
        else {if(op==false)
                robot.cliffdetect=false
              else {echo "Please use true/false to enable/disable CliffDetection"}
             }
    };

    function robot.ObstacleDetection(op)             //User Interface : Enable/Disable CliffDetection
    {
        if (op==true)
           robot.obstacledetect=true
        else {if(op==false)
                robot.obstacledetect=false
              else {echo "Please use true/false to enable/disable CliffDetection"}
             }
    };


    ################################
    #   Cliff Detection Functions
    ################################

    // Variables initialization

    robot.cliffdetect=false;

    function robot.cliffinitialization()
    {
        robot.cliffalarmflag=0;
        for(i=0;i<10;i++)
           robot.cdbuffered[i]=0;
    };

    // Basic Filter system : Buffered sensor data is averaged, and tested
    function robot.cliffalert()
    {
        DANGERLEVEL1=30;
        bfsize=10;
        robot.cliffalarmflag = (robot.cliffalarmflag*bfsize) - robot.cdbuffered[0];
        for(i=0;i<(bfsize-1);i++)
            robot.cdbuffered[i]=robot.cdbuffered[i+1];

        robot.cdbuffered[bfsize-1]=distanceChest;
        robot.cliffalarmflag = robot.cliffalarmflag + robot.cdbuffered[bfsize-1];
        robot.cliffalarmflag = robot.cliffalarmflag/bfsize;

        if(robot.cliffalarmflag > DANGERLEVEL1)
           { stop cdetect | wait(200) | facealert: ledF'n = 0.5 sin:1s ampli:0.5,  wait(200) | redalarm() }
        else leds = 0;
    };

    // Action if the alerts (cliif or obstacle) are true
    function robot.redalarm()
    {
        headPan = 0 smooth : 1s & headTilt = 0 smooth : 1s,
        stop gait,
        robot.cliffinitialization(),
        robot.odinitialization(),
        neck=-70 smooth : 1s;
        wait(2s);
        neck=-40 smooth : 500;
        speaker.play("drum1.wav");
        mytag: headPan'n = 0.5 sin:2s ampli:0.5,
        wait(6s) | stop mytag;
        NormalWalk(-1);
        wait(1s);
        stop facealert;
        neck=0 smooth : 1s & headPan = 0 smooth : 1s & headTilt = 0 smooth : 1s;
        ledF=0
    };


    ################################
    #   Cliff Detection Functions
    ################################

    // Variables initialization

    robot.obstacledetect=false;

    function robot.odinitialization()
    {
        robot.odalarmflag=50;
        for(i=0;i<5;i++)
           robot.odbuffered[i]=50;
    };

    // Basic Filter system : Buffered sensor data is averaged, and tested
    function robot.obstaclealert()
    {
        DANGERLEVEL2=25;
        bfsize=5;
        robot.odalarmflag = (robot.odalarmflag*bfsize) - robot.odbuffered[0];
        for(i=0;i<(bfsize-1);i++)
            robot.odbuffered[i]=robot.odbuffered[i+1];

        robot.odbuffered[bfsize-1]=distanceNear;
        robot.odalarmflag = robot.odalarmflag + robot.odbuffered[bfsize-1];
        robot.odalarmflag = robot.odalarmflag/bfsize;

        if(robot.odalarmflag < DANGERLEVEL2)
           { stop odetect | wait(400) | facealert: ledF'n = 0.5 sin:1s ampli:0.5,  wait(400) | robot.redalarm() }
        else ledF = 0;
    };
